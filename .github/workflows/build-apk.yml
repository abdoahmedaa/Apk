name: 🚀 Build Enhanced FocusFlow APK

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  GRADLE_OPTS: -Dorg.gradle.daemon=false -Xmx4g

jobs:
  build:
    name: 📱 Build Enhanced APK
    runs-on: ubuntu-latest
    timeout-minutes: 25
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: ☕ Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: 📦 Cache Gradle Dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: 🔧 Setup Gradle Wrapper
      run: |
        echo "🔍 Checking Gradle wrapper files..."
        ls -la gradlew* || echo "gradlew files missing"
        ls -la gradle/wrapper/ || echo "wrapper directory missing"
        
        # Make gradlew executable
        chmod +x gradlew || echo "gradlew not found, will create"
        
        # Verify wrapper files exist
        if [ ! -f gradle/wrapper/gradle-wrapper.jar ]; then
          echo "❌ gradle-wrapper.jar missing"
          echo "📁 Available files in gradle/wrapper/:"
          ls -la gradle/wrapper/ || echo "Directory doesn't exist"
          
          # Create wrapper directory if missing
          mkdir -p gradle/wrapper
          
          # Download gradle wrapper jar directly
          echo "⬇️ Downloading gradle-wrapper.jar..."
          curl -L -o gradle/wrapper/gradle-wrapper.jar \
            https://github.com/gradle/gradle/raw/v8.5.0/gradle/wrapper/gradle-wrapper.jar
          
          echo "✅ Downloaded gradle-wrapper.jar"
        fi
        
        # Verify wrapper properties
        if [ ! -f gradle/wrapper/gradle-wrapper.properties ]; then
          echo "❌ gradle-wrapper.properties missing, creating..."
          cat > gradle/wrapper/gradle-wrapper.properties << 'EOF'
        distributionBase=GRADLE_USER_HOME
        distributionPath=wrapper/dists
        distributionUrl=https\://services.gradle.org/distributions/gradle-8.5-bin.zip
        networkTimeout=10000
        validateDistributionUrl=true
        zipStoreBase=GRADLE_USER_HOME
        zipStorePath=wrapper/dists
        EOF
          echo "✅ Created gradle-wrapper.properties"
        fi
        
        # Create gradlew if missing
        if [ ! -f gradlew ]; then
          echo "❌ gradlew missing, creating..."
          cat > gradlew << 'EOF'
        #!/bin/sh
        
        DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'
        APP_NAME="Gradle"
        APP_BASE_NAME=`basename "$0"`
        
        # Resolve links: $0 may be a link
        PRG="$0"
        while [ -h "$PRG" ] ; do
            ls=`ls -ld "$PRG"`
            link=`expr "$ls" : '.*-> \(.*\)$'`
            if expr "$link" : '/.*' > /dev/null; then
                PRG="$link"
            else
                PRG=`dirname "$PRG"`"/$link"
            fi
        done
        
        SAVED="`pwd`"
        cd "`dirname \"$PRG\"`/" >/dev/null
        APP_HOME="`pwd -P`"
        cd "$SAVED" >/dev/null
        
        CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
        
        # Determine the Java command to use to start the JVM.
        if [ -n "$JAVA_HOME" ] ; then
            if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
                # IBM's JDK on AIX uses strange locations for the executables
                JAVACMD="$JAVA_HOME/jre/sh/java"
            else
                JAVACMD="$JAVA_HOME/bin/java"
            fi
            if [ ! -x "$JAVACMD" ] ; then
                die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME
        
        Please set the JAVA_HOME variable in your environment to match the
        location of your Java installation."
            fi
        else
            JAVACMD="java"
            which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
        
        Please set the JAVA_HOME variable in your environment to match the
        location of your Java installation."
        fi
        
        # Collect all arguments for the java command.
        set -- \
                "-Dorg.gradle.appname=$APP_BASE_NAME" \
                -classpath "$CLASSPATH" \
                org.gradle.wrapper.GradleWrapperMain \
                "$@"
        
        exec "$JAVACMD" "$@"
        EOF
          chmod +x gradlew
          echo "✅ Created gradlew"
        fi
        
        echo "🔍 Final verification:"
        ls -la gradlew*
        ls -la gradle/wrapper/
        
    - name: ✅ Test Gradle Wrapper
      run: |
        echo "🧪 Testing Gradle wrapper..."
        ./gradlew --version
        echo "✅ Gradle wrapper working!"
        
    - name: 🧹 Clean Project
      run: |
        echo "🧹 Cleaning project..."
        ./gradlew clean --stacktrace
        echo "✅ Clean completed!"
        
    - name: 🔍 Verify Enhanced Features
      run: |
        echo "🔍 Checking enhanced features..."
        echo "📊 Total Kotlin files: $(find app/src -name "*.kt" 2>/dev/null | wc -l)"
        echo "🎨 UI components: $(find app/src -path "*/ui/*" -name "*.kt" 2>/dev/null | wc -l)"
        echo "📈 Analytics files: $(find app/src -path "*analytics*" -name "*.kt" 2>/dev/null | wc -l)"
        echo "🎭 Animation files: $(find app/src -path "*animation*" -name "*.kt" 2>/dev/null | wc -l)"
        echo "📱 Enhanced components: $(find app/src -path "*enhanced*" -name "*.kt" 2>/dev/null | wc -l)"
        echo "✅ Enhanced features verified!"
        
    - name: 🏗️ Build Enhanced Debug APK
      run: |
        echo "🚀 Building FocusFlow Enhanced APK..."
        echo ""
        echo "📱 Enhanced features included:"
        echo "   ✅ Material 3 Design System"
        echo "   ✅ Advanced Analytics Dashboard"
        echo "   ✅ Enhanced Data Models"
        echo "   ✅ Swipeable UI Components"
        echo "   ✅ Animation Framework"
        echo "   ✅ Productivity Metrics"
        echo "   ✅ Pull-to-refresh Functionality"
        echo "   ✅ Haptic Feedback Integration"
        echo ""
        echo "🔨 Starting build process..."
        ./gradlew assembleDebug --stacktrace --info
        
    - name: 📋 Verify APK Creation
      run: |
        echo "📱 APK Build Results:"
        echo "📁 Checking output directory..."
        ls -la app/build/outputs/apk/debug/ || echo "❌ APK directory not found"
        
        if [ -f app/build/outputs/apk/debug/app-debug.apk ]; then
          APK_SIZE=$(du -h app/build/outputs/apk/debug/app-debug.apk | cut -f1)
          APK_BYTES=$(stat -c%s app/build/outputs/apk/debug/app-debug.apk)
          echo ""
          echo "✅ SUCCESS! Enhanced FocusFlow APK built successfully!"
          echo "📦 APK Size: $APK_SIZE ($APK_BYTES bytes)"
          echo "📍 Location: app/build/outputs/apk/debug/app-debug.apk"
          echo ""
          
          # Verify APK is valid Android package
          file app/build/outputs/apk/debug/app-debug.apk
          
          # Show APK details
          echo "📋 APK Details:"
          ls -lh app/build/outputs/apk/debug/app-debug.apk
          
        else
          echo "❌ APK file not found!"
          echo "🔍 Searching for any APK files..."
          find app/build -name "*.apk" 2>/dev/null || echo "No APK files found anywhere"
          echo ""
          echo "📁 Available files in output directory:"
          find app/build/outputs -type f 2>/dev/null || echo "No output files found"
          exit 1
        fi
        
    - name: 🧪 Run Unit Tests
      run: |
        echo "🧪 Running unit tests..."
        ./gradlew testDebugUnitTest --stacktrace
        echo "✅ Tests completed!"
      continue-on-error: true
      
    - name: 📤 Upload Enhanced APK
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: focusflow-enhanced-apk-${{ github.run_number }}
        path: |
          app/build/outputs/apk/debug/app-debug.apk
          app/build/outputs/apk/debug/output-metadata.json
        retention-days: 30
        compression-level: 6
        
    - name: 📊 Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ github.run_number }}
        path: |
          app/build/reports/tests/
          app/build/test-results/
        retention-days: 7
        
    - name: 📝 Build Summary
      if: always()
      run: |
        echo "## 🎉 FocusFlow Enhanced Build Complete!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📱 Build Information" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Build Number:** ${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Build Time:** $(date)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ✨ Enhanced Features Included" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Material 3 Design System" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Advanced Analytics Dashboard" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Enhanced Data Models (Tasks, Habits, Analytics)" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Swipeable UI Components with Gestures" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Smooth Animation Framework" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Productivity Metrics & Insights" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Pull-to-refresh Functionality" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Haptic Feedback Integration" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [ -f app/build/outputs/apk/debug/app-debug.apk ]; then
          APK_SIZE=$(du -h app/build/outputs/apk/debug/app-debug.apk | cut -f1)
          echo "### 📦 APK Details" >> $GITHUB_STEP_SUMMARY
          echo "- **File:** app-debug.apk" >> $GITHUB_STEP_SUMMARY
          echo "- **Size:** $APK_SIZE" >> $GITHUB_STEP_SUMMARY
          echo "- **Status:** ✅ Successfully Built" >> $GITHUB_STEP_SUMMARY
          echo "- **Download:** Available in Artifacts section below" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🚀 Ready to Install!" >> $GITHUB_STEP_SUMMARY
          echo "1. Download the APK from Artifacts section" >> $GITHUB_STEP_SUMMARY
          echo "2. Enable 'Unknown sources' on your Android device" >> $GITHUB_STEP_SUMMARY
          echo "3. Install and enjoy your enhanced FocusFlow app!" >> $GITHUB_STEP_SUMMARY
        else
          echo "### ❌ APK Build Failed" >> $GITHUB_STEP_SUMMARY
          echo "Check the build logs above for details." >> $GITHUB_STEP_SUMMARY
        fi
